#!/bin/sh
# vim: set softtabstop=2 shiftwidth=2 expandtab :
# (c) 2019 KissCool

# initialize or update the NVD dataset

# robustify the script
topdir=`dirname "$(realpath $0)"`

# synchronize the dataset
nvdsync -v=1 -cpe_feed=cpe-2.3.xml.gz -cve_feed=cve-1.1.json.gz "${topdir}"/nvd/
# create the CVE/description reduction in order to optimize the following searches
#zcat "${topdir}"/nvd/*.json.gz | jq '.CVE_Items[] | {(.cve.CVE_data_meta.ID): .cve.description.description_data[0].value}' > "${topdir}"/nvd/cve_redux.json
zcat "${topdir}"/nvd/*.json.gz | jq '.CVE_Items[] | {(.cve.CVE_data_meta.ID): .cve.description.description_data[0].value}' | awk '
  BEGIN {
    # input and output are not equivalent here, define a file header
    FS = "\": ";
    OFS = "\t";
    print "CVE", "Description"
  }
  # only process lines with a separator between CVE and description
  /:/ {
    split($1,tmp1,"\"");
    print tmp1[2], $2;
  }
  !/:/ {
    next
  }
' > "${topdir}"/nvd/cve_redux.tsv
# create the CVE/CVSS_string reduction in order to optimize the following searches
zcat "${topdir}"/nvd/*.json.gz | jq '.CVE_Items[] | {(.cve.CVE_data_meta.ID): .impact.baseMetricV3.cvssV3.vectorString}' | awk '
  BEGIN {
    # input and output are not equivalent here, define a file header
    FS = "\": ";
    OFS = "\t";
    print "CVE", "Base_vector"
  }
  # only process lines with a separator between CVE and Base_vector
  /:/ {
    split($1,tmp1,"\"");
    split($2,tmp2,"\"");
    print tmp1[2], tmp2[2];
  }
  !/:/ {
    next
  }
' > "${topdir}"/nvd/cve_cvss.tsv

